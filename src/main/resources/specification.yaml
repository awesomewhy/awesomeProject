openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v1
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /profile/safety/update:
    post:
      summary: Обновление своего профиля
      tags:
        - safety-controller
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileDto'
        required: true
      responses:
        '200':
          description: OK
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /profile/safety/deleteprofile:
    post:
      summary: удаление своего профиля
      tags:
        - safety-controller
      operationId: deleteProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProfileDto'
        required: true
      responses:
        '200':
          description: OK
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /profile/safety/changepassword:
    post:
      summary: смена пароля
      tags:
        - safety-controller
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
        required: true
      responses:
        '200':
          description: OK
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/registration:
    post:
      summary: регистрация
      tags:
        - auth-controller
      operationId: createNewUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationUserDto'
        required: true
      responses:
        '200':
          description: OK
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login:
    post:
      summary: получение токена
      tags:
        - auth-controller
      operationId: createAuthToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/userrole/{id}:
    post:
      summary: изменить роль пользователя на user
      tags:
        - admin-controller
      operationId: setUserRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: OK
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/adminrole/{id}:
    post:
      summary: изменить роль пользователя на admin
      tags:
        - admin-controller
      operationId: setAdminRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: OK
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /additem:
    post:
      summary: добавить продукт (создать обьвление)
      tags:
        - product-controller
      operationId: addProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSellDto'
        required: true
      responses:
        '200':
          description: OK
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sortbycity:
    get:
      summary: сортировка по городу (пока что выводит только те у которых London город)
      tags:
        - product-controller
      operationId: sortByCity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductShowDto'
  /profile:
    get:
      summary: получить инфу о своем профиле
      tags:
        - user-controller
      operationId: getMyProfile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyProfileDto'
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /myproducts:
    get:
      summary: получить все свои продукты(обьявления)
      tags:
        - product-controller
      operationId: getMyProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MyProductDto'
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/users:
    get:
      summary: получить всех юзеров(пока что все данные выводит, позже сделаю норм)
      tags:
        - admin-controller
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /:
    get:
      summary: получить все продукты (обьявления) вообще всех юзеров (пока что без пагинации)
      tags:
        - product-controller
      operationId: getAllProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductShowDto'
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /profile/deleteproduct/{id}:
    delete:
      summary: удалить свой продукт по айди
      tags:
        - product-controller
      operationId: deleteProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        'default':
          description: Все нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    UpdateProfileDto:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        nickname:
          type: string
        city:
          type: string
    DeleteProfileDto:
      type: object
      properties:
        password:
          type: string
    ChangePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        repeatPassword:
          type: string
    RegistrationUserDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        email:
          type: string
        city:
          type: string
    JwtRequestDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    ProductSellDto:
      type: object
      properties:
        price:
          type: number
        type:
          type: string
        city:
          type: string
        description:
          type: string
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        nickname:
          type: string
        password:
          type: string
        email:
          type: string
        city:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    PriceSortDto:
      type: object
      properties:
        startPrice:
          type: number
        endPrice:
          type: number
    ProductShowDto:
      type: object
      properties:
        description:
          type: string
        price:
          type: number
        city:
          type: string
    MyProductDto:
      type: object
      properties:
        city:
          type: string
        type:
          type: string
        price:
          type: number
        dateCreation:
          type: string
        description:
          type: string
    MyProfileDto:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        nickname:
          type: string
        city:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string


    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
